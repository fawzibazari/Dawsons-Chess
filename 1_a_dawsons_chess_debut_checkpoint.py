# -*- coding: utf-8 -*-
"""1_A_Dawsons-Chess_debut-checkpoint.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dwvZbQgoaMpzBUUPE2EZNeMRHAf9bsf0

***
# INTRODUCTION À PYTHON
***
######  <center> Eulalio TORRES, Ph. D.
<center> e-mail: ingetorresg@gmail.com <br>
***

    This is an excersice file from Expert en Etudes et Développement du Système d’Information with IMIE-Paris for the promotion M.Sc.2
    
# <left>Dawsons Chess
"""



"""### PYTHON CODES

The game board will be modeled by a list of integers equal to 0, 1 or -1. A 0 for an empty square, a 1 for a square containing a pawn, and a -1 to a square adjacent to a square containing a pawn.

Notations of the functions’ parameters that we will implement:

"board": a list of integers equal to 0, 1 or -1 that represents the game board.<br>
"n": a strictly positive integer equal to the length of "board".<br>
"i": an integer<br>

## Implement the following functions :

A function "newBoard(n)" that returns a list of n integers equal to 0, called board.
"""

def newBoard(n):
    lst = [0] * n
    return lst



board=newBoard(10)
print(board)

"""A function "display(board, n)" that prints the game board on the console like

A " ." for a 0, a "x" for a 1 and a "o" for a -1. The squares will be numbered.
"""

print(repr(board).rjust(2), end='')

def display(board, n):

    for i in range(n):
        if board[i] == 1:
            print(' X ', end = ' ')
        elif board[i] == -1:
            print(' 0 ', end = ' ')
        else:
            print(' . ', end = ' ')







"""A function "possible(board, n, i)" that returns True if i is the index of a square where a pawn can be placed, and False otherwise.

"""

def possible(board,n,i):
    return True if board[i] == 0 else False



board=[0,0,1,-1,0,0,0]
possible(board,8,3)

"""A function "select(board, n)" that asks the current player to input the number of a square where it is allowed to put a pawn. We will suppose that such a square exists, so we won't test it here. As long as the number is not valid because of the rules, we will ask to input another number. Finally, the function will return this number."""

# def select(array):
#     test = input("enter your pawn: ")
#     if test.isnumeric():
#         print(array)
#         while possible(array, len(array),int(test) -1) == False:
#                 select(array)
#         return test
#     else: 
#         select(array)

def select(board,n):
  NSquare=int(input('Input the number of a square:'))
  NSquare=NSquare-1
  if possible(board,n, NSquare)==False:
    print('Try again')
    NSquare=int(input('Try other number of a square'))
    print("Well Done")
  return NSquare



3

2

"""A function "put(board, n, i)" where i is an integer supposed to be the index of a square where the current player can put a pawn. This function updates the game board according to the rules.

"""

def put(board, n, i):
    if i==0:
      board[i+1] = -1
      board[i] = 1
    elif i==n-1:
      board[i] = 1
      board[i-1] = -1
    else : 
      board[i] = 1
      board[i+1] = -1
      board[i-1] = -1
    return board



# board=[0,1,0,0,0,0,0,0]
# n=8
# i=8
# put(board,n,i)

# print(board)







"""A function "again(board, n)" that returns True if the current player can again put a pawn on the game board, and False

"""

def again(board, n):
  print("hello world")
  return True if sum (i==0 for i in board) >=1 else False

# print(board)
# again(board,n)

"""A function "Dawson(n)" that uses the previous functions to manage a complete game on a 1 x n game board.

"""

def Dawsons(n):
    board=newBoard(n)
    print(board)

    NS=1
    possible(board,n,NS)
    display(board, n)
    counter=1
    while again(board,n)==True:
        print('Your turn Player {}'.format('2' if counter % 2 == 0 else '1'))
        NS=select(board,n)
        display(put(board,n,NS),n)
        counter+=1
        P=1 if counter%2==0 else 2
    print('Player {} Wins'.format('2' if P % 2 == 0 else '1'))

Dawsons(12)

